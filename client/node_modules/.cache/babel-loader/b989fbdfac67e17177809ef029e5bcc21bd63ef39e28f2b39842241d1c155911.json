{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios';\n\n// const AdminStores = () => {\n//   const [stores, setStores] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [message, setMessage] = useState({ type: '', text: '' });\n//   const [searchTerm, setSearchTerm] = useState('');\n\n//   useEffect(() => {\n//     fetchStores();\n//   }, []);\n\n//   const fetchStores = async () => {\n//     try {\n//       const response = await axios.get('/api/admin/stores');\n\n//       // Check if response.data is an array or has a stores property that is an array\n//       if (Array.isArray(response.data)) {\n//         setStores(response.data);\n//       } else if (response.data && Array.isArray(response.data.stores)) {\n//         setStores(response.data.stores);\n//       } else {\n//         console.warn('API response format unexpected:', response.data);\n//         setStores([]); // Ensure stores is an empty array if data format is unexpected\n//       }\n//       setLoading(false);\n//     } catch (err) {\n//       console.error('Error fetching stores:', err);\n//       setError('Failed to load stores');\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleApproveStore = async (storeId) => {\n//     try {\n//       await axios.put(`/api/admin/stores/${storeId}/approve`);\n//       setMessage({ type: 'success', text: 'Store approved successfully' });\n//       fetchStores(); // Refresh the store list\n//     } catch (err) {\n//       setMessage({ \n//         type: 'danger', \n//         text: err.response?.data?.message || 'Failed to approve store' \n//       });\n//     }\n//   };\n\n//   const handleDeleteStore = async (storeId) => {\n//     if (!window.confirm('Are you sure you want to delete this store?')) {\n//       return;\n//     }\n\n//     try {\n//       await axios.delete(`/api/admin/stores/${storeId}`);\n//       setMessage({ type: 'success', text: 'Store deleted successfully' });\n//       fetchStores(); // Refresh the store list\n//     } catch (err) {\n//       setMessage({ \n//         type: 'danger', \n//         text: err.response?.data?.message || 'Failed to delete store' \n//       });\n//     }\n//   };\n\n//   // Ensure we have an array before filtering\n//   const filteredStores = Array.isArray(stores) \n//     ? stores.filter(store => \n//         store.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         store.address?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         store.owner?.username?.toLowerCase().includes(searchTerm.toLowerCase())\n//       )\n//     : [];\n\n//   if (loading) return <div className=\"container mt-4\">Loading...</div>;\n//   if (error) return <div className=\"container mt-4 text-danger\">{error}</div>;\n\n//   return (\n//     <div className=\"container mt-4\">\n//       <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//         <h1>Store Management</h1>\n//         <Link to=\"/admin/stores/add\" className=\"btn btn-primary\">\n//           <i className=\"fas fa-plus-circle me-1\"></i> Add New Store\n//         </Link>\n//       </div>\n\n//       {message.text && (\n//         <div className={`alert alert-${message.type} alert-dismissible fade show`} role=\"alert\">\n//           {message.text}\n//           <button \n//             type=\"button\" \n//             className=\"btn-close\" \n//             onClick={() => setMessage({ type: '', text: '' })}\n//             aria-label=\"Close\"\n//           />\n//         </div>\n//       )}\n\n//       <div className=\"mb-3\">\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           placeholder=\"Search stores by name, address, or owner...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//       </div>\n\n//       <div className=\"card\">\n//         <div className=\"card-body\">\n//           {filteredStores.length === 0 ? (\n//             <div className=\"text-center p-4\">\n//               <p className=\"mb-0\">No stores found</p>\n//             </div>\n//           ) : (\n//             <div className=\"table-responsive\">\n//               <table className=\"table table-striped\">\n//                 <thead>\n//                   <tr>\n//                     <th>Name</th>\n//                     <th>Address</th>\n//                     <th>Owner</th>\n//                     <th>Status</th>\n//                     <th>Rating</th>\n//                     <th>Created At</th>\n//                     <th>Actions</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {filteredStores.map(store => (\n//                     <tr key={store.id}>\n//                       <td>\n//                         <Link to={`/stores/${store.id}`}>{store.name}</Link>\n//                       </td>\n//                       <td>{store.address}</td>\n//                       <td>{store.owner?.username || 'Unknown'}</td>\n//                       <td>\n//                         <span className={`badge bg-${store.approved ? 'success' : 'warning'}`}>\n//                           {store.approved ? 'Approved' : 'Pending'}\n//                         </span>\n//                       </td>\n//                       <td>\n//                         <div className=\"text-warning\">\n//                           {'★'.repeat(Math.round(store.averageRating || 0))}\n//                           {'☆'.repeat(5 - Math.round(store.averageRating || 0))}\n//                         </div>\n//                         <small className=\"text-muted\">\n//                           {store.averageRating ? store.averageRating.toFixed(1) : 'No ratings'}\n//                         </small>\n//                       </td>\n//                       <td>{store.createdAt ? new Date(store.createdAt).toLocaleDateString() : 'N/A'}</td>\n//                       <td>\n//                         <div className=\"d-flex gap-2\">\n//                           {!store.approved && (\n//                             <button\n//                               className=\"btn btn-success btn-sm\"\n//                               onClick={() => handleApproveStore(store.id)}\n//                             >\n//                               Approve\n//                             </button>\n//                           )}\n//                           <Link \n//                             to={`/admin/stores/${store.id}/edit`} \n//                             className=\"btn btn-primary btn-sm\"\n//                           >\n//                             Edit\n//                           </Link>\n//                           <button\n//                             className=\"btn btn-danger btn-sm\"\n//                             onClick={() => handleDeleteStore(store.id)}\n//                           >\n//                             Delete\n//                           </button>\n//                         </div>\n//                       </td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AdminStores;","map":{"version":3,"names":[],"sources":["C:/Users/rawoo/Documents/202201921_Ganesh Rawool/RateMyStore/client/src/pages/AdminStores.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// const AdminStores = () => {\r\n//   const [stores, setStores] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [message, setMessage] = useState({ type: '', text: '' });\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     fetchStores();\r\n//   }, []);\r\n\r\n//   const fetchStores = async () => {\r\n//     try {\r\n//       const response = await axios.get('/api/admin/stores');\r\n      \r\n//       // Check if response.data is an array or has a stores property that is an array\r\n//       if (Array.isArray(response.data)) {\r\n//         setStores(response.data);\r\n//       } else if (response.data && Array.isArray(response.data.stores)) {\r\n//         setStores(response.data.stores);\r\n//       } else {\r\n//         console.warn('API response format unexpected:', response.data);\r\n//         setStores([]); // Ensure stores is an empty array if data format is unexpected\r\n//       }\r\n//       setLoading(false);\r\n//     } catch (err) {\r\n//       console.error('Error fetching stores:', err);\r\n//       setError('Failed to load stores');\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleApproveStore = async (storeId) => {\r\n//     try {\r\n//       await axios.put(`/api/admin/stores/${storeId}/approve`);\r\n//       setMessage({ type: 'success', text: 'Store approved successfully' });\r\n//       fetchStores(); // Refresh the store list\r\n//     } catch (err) {\r\n//       setMessage({ \r\n//         type: 'danger', \r\n//         text: err.response?.data?.message || 'Failed to approve store' \r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteStore = async (storeId) => {\r\n//     if (!window.confirm('Are you sure you want to delete this store?')) {\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       await axios.delete(`/api/admin/stores/${storeId}`);\r\n//       setMessage({ type: 'success', text: 'Store deleted successfully' });\r\n//       fetchStores(); // Refresh the store list\r\n//     } catch (err) {\r\n//       setMessage({ \r\n//         type: 'danger', \r\n//         text: err.response?.data?.message || 'Failed to delete store' \r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // Ensure we have an array before filtering\r\n//   const filteredStores = Array.isArray(stores) \r\n//     ? stores.filter(store => \r\n//         store.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         store.address?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         store.owner?.username?.toLowerCase().includes(searchTerm.toLowerCase())\r\n//       )\r\n//     : [];\r\n\r\n//   if (loading) return <div className=\"container mt-4\">Loading...</div>;\r\n//   if (error) return <div className=\"container mt-4 text-danger\">{error}</div>;\r\n\r\n//   return (\r\n//     <div className=\"container mt-4\">\r\n//       <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//         <h1>Store Management</h1>\r\n//         <Link to=\"/admin/stores/add\" className=\"btn btn-primary\">\r\n//           <i className=\"fas fa-plus-circle me-1\"></i> Add New Store\r\n//         </Link>\r\n//       </div>\r\n\r\n//       {message.text && (\r\n//         <div className={`alert alert-${message.type} alert-dismissible fade show`} role=\"alert\">\r\n//           {message.text}\r\n//           <button \r\n//             type=\"button\" \r\n//             className=\"btn-close\" \r\n//             onClick={() => setMessage({ type: '', text: '' })}\r\n//             aria-label=\"Close\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"mb-3\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"form-control\"\r\n//           placeholder=\"Search stores by name, address, or owner...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//       </div>\r\n\r\n//       <div className=\"card\">\r\n//         <div className=\"card-body\">\r\n//           {filteredStores.length === 0 ? (\r\n//             <div className=\"text-center p-4\">\r\n//               <p className=\"mb-0\">No stores found</p>\r\n//             </div>\r\n//           ) : (\r\n//             <div className=\"table-responsive\">\r\n//               <table className=\"table table-striped\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>Name</th>\r\n//                     <th>Address</th>\r\n//                     <th>Owner</th>\r\n//                     <th>Status</th>\r\n//                     <th>Rating</th>\r\n//                     <th>Created At</th>\r\n//                     <th>Actions</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {filteredStores.map(store => (\r\n//                     <tr key={store.id}>\r\n//                       <td>\r\n//                         <Link to={`/stores/${store.id}`}>{store.name}</Link>\r\n//                       </td>\r\n//                       <td>{store.address}</td>\r\n//                       <td>{store.owner?.username || 'Unknown'}</td>\r\n//                       <td>\r\n//                         <span className={`badge bg-${store.approved ? 'success' : 'warning'}`}>\r\n//                           {store.approved ? 'Approved' : 'Pending'}\r\n//                         </span>\r\n//                       </td>\r\n//                       <td>\r\n//                         <div className=\"text-warning\">\r\n//                           {'★'.repeat(Math.round(store.averageRating || 0))}\r\n//                           {'☆'.repeat(5 - Math.round(store.averageRating || 0))}\r\n//                         </div>\r\n//                         <small className=\"text-muted\">\r\n//                           {store.averageRating ? store.averageRating.toFixed(1) : 'No ratings'}\r\n//                         </small>\r\n//                       </td>\r\n//                       <td>{store.createdAt ? new Date(store.createdAt).toLocaleDateString() : 'N/A'}</td>\r\n//                       <td>\r\n//                         <div className=\"d-flex gap-2\">\r\n//                           {!store.approved && (\r\n//                             <button\r\n//                               className=\"btn btn-success btn-sm\"\r\n//                               onClick={() => handleApproveStore(store.id)}\r\n//                             >\r\n//                               Approve\r\n//                             </button>\r\n//                           )}\r\n//                           <Link \r\n//                             to={`/admin/stores/${store.id}/edit`} \r\n//                             className=\"btn btn-primary btn-sm\"\r\n//                           >\r\n//                             Edit\r\n//                           </Link>\r\n//                           <button\r\n//                             className=\"btn btn-danger btn-sm\"\r\n//                             onClick={() => handleDeleteStore(store.id)}\r\n//                           >\r\n//                             Delete\r\n//                           </button>\r\n//                         </div>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AdminStores; "],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}